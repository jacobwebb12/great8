// Datasource
 datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
 }

// Generator
 generator client {
  provider = "prisma-client-js"
 }

// NextAuth models
 model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("USER")
  accounts      Account[]
  sessions      Session[]
 }

 model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @map("refreshToken")
  access_token      String?  @map("accessToken")
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
 }

 model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 }

 model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
 }

 // Domain model
 model Player {
  id             String   @id @default(cuid())
  name           String
  gradYear       Int
  height         String?  // e.g., 6'1"
  weight         String?  // e.g., 185 lbs
  headshotUrl    String?
  youtubeLinks   String[] @default([])
  scoutingReport String?

  // Skills 0â€“5.0 stored as Decimal(2,1)
  speed         Decimal @db.Decimal(2,1)
  agility       Decimal @db.Decimal(2,1)
  stick         Decimal @db.Decimal(2,1)
  defense       Decimal @db.Decimal(2,1)
  strength      Decimal @db.Decimal(2,1)
  iq            Decimal @db.Decimal(2,1)
  communication Decimal @db.Decimal(2,1)

  overallScore Int      // 0-100

  // Unique identity for upsert
  @@unique([name, gradYear])
 } 